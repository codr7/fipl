(in-package fipl)

(defun parse-tests ()
  (let-pos ("parse-tests")
    (let-forms ()
      (with-input-from-string (in "foo 42 baz")
	(parse in))
      (assert (= (length *forms*) 3)))))

(defun stack-tests ()
  (let-pos ("stack-tests")
    (let-forms ()
      (with-input-from-string (in "42")
	(parse in))
      (let-ops ((nreverse *forms*))
	(let-stack ()
	  (exec)
	  (assert (= (pop-val) 42)))))))

(defun env-tests ()
  (let-pos ("env-tests")
    (let-forms ()
      (with-input-from-string (in "foo")
	(parse in))
      (let-env (:foo 42)
	(let-ops ((nreverse *forms*))
	  (let-stack ()
	    (exec)
	    (assert (= (pop-val) 42))))))))

(defun fn-tests ()
  (let-pos ("fn-tests")
    (let-forms ()
      (with-input-from-string (in "42 cp")
	(parse in))
      (let-env (:cp #'cp)
	(let-ops ((nreverse *forms*))
	  (let-stack ()
	    (exec)
	    (assert (= (pop-val) 42))
	    (assert (= (pop-val) 42))))))))

(defun ref-tests ()
  (let-pos ("ref-tests")
    (let-forms ()
      (with-input-from-string (in "42 &cp call")
	(parse in))
      (let-env (:cp #'cp :call #'call)
	(let-ops ((nreverse *forms*))
	  (let-stack ()
	    (exec)
	    (assert (= (pop-val) 42))
	    (assert (= (pop-val) 42))))))))

(defun and-tests ()
  (let-pos ("and-tests")
    (let-forms ()
      (with-input-from-string (in "t 42 and")
	(parse in))
      (let-env (:t t :and (new-prim :and #'and-imp))
	(let-ops ((nreverse *forms*))
	  (let-stack ()
	    (exec)
	    (assert (= (pop-val) 42))))))))

(defun tests ()
  (parse-tests)
  (stack-tests)
  (env-tests)
  (fn-tests)
  (ref-tests)
  (and-tests))
